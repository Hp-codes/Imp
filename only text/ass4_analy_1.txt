4 -Data Analytics I 
Create a Linear Regression
*import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline
*from sklearn.datasets import load_boston
boston =load_boston()
*data = pd.DataFrame(boston.data)
*data.columns = boston.feature_names
data.head()
*data['PRICE'] = boston.target
*data
*data.isnull().sum()
*corr = data.corr()
corr.shape
*x = data.drop(['PRICE'], axis = 1)
y = data['PRICE']
*from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest =train_test_split(x, y, 
test_size =0.2,random_state = 0)
*import sklearn
from sklearn.linear_model import LinearRegression
lm = LinearRegression()
model=lm.fit(xtrain,ytrain)
*xtrain
*ytrain_pred=lm.predict(xtrain)
ytest_pred=lm.predict(xtest)
*testdata=[[0.00632,18.0,2.31,0.0,0.538,6.575,65.2,
4.0900,1.0,296.0,15.3,396.90,4.98]]
*df1=pd.DataFrame(ytrain_pred,ytrain)
df2=pd.DataFrame(ytest_pred,ytest)
df1
*from sklearn.metrics import mean_squared_error, r2_score
mse = mean_squared_error(ytest, ytest_pred)
print('MSE on test data:',mse)
mse1 = mean_squared_error(ytrain_pred, ytrain)
print('MSE on training data:',mse1)
*r2 = lm.score(xtest, ytest)
rmse = (np.sqrt(mean_squared_error(ytest, ytest_pred)))
print('r-squared: {}' .format(r2))
print('-----------------------------------------')
print('root mean squared error: {}'.format(rmse))
*plt.scatter(ytrain ,ytrain_pred,c='blue',marker='o',label='Training data')
plt.scatter(ytest,ytest_pred ,c='lightgreen',marker='s',label='Test data')
plt.xlabel('True values')
plt.ylabel('Predicted')
plt.title("True value vs Predicted value")
plt.legend(loc= 'upper left') #plt.hlines(y=0,xmin=0,xmax=50)
plt.plot()
plt.show()
*testdata=[[0.00632,18.0,2.31,0.0,0.538,6.575,65.2,4.0900,
1.0,296.0,15.3,396.90,4.98]]
*test_pred = lm.predict(testdata)
test_pred