5-Data Analytics II
Implement logistic regression.
* import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
%matplotlib inline
* df = pd.read_csv("Social_Network_Ads.csv")
df.head(10)
* df.describe()
* x = df.iloc[:,[2,3]].values
y = df.iloc[:,4].values
*x
*y
* from sklearn.model_selection import train_test_split
X_train , X_test , y_train , y_test = train_test_split(x,y,
test_size = 0.25,random_state=0)
* from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
* X_train
* from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state=0)
classifier.fit(X_train,y_train)
* y_pred = classifier.predict(X_test)
* y_pred
* from sklearn.metrics import confusion_matrix,classification_report
cm = confusion_matrix(y_test , y_pred)
*cm
* c1_report = classification_report(y_test,y_pred)
* c1_report
* tp , fn ,fp , tn = confusion_matrix(y_test,y_pred,labels=[0,1]).reshape(-1)
print('Outcome values : \n' , tp , fn , fp ,tn)
* accuracy_cm = (tp+tn)/(tp+fp+tn+fn)
precision_cm = tp/(tp+fp)
recall_cm = tp/(tp+fn)
f1_score = 2/((1/recall_cm)+(1/precision_cm))
* print("Accuracy : ",accuracy_cm)
print("Precision : ",precision_cm)
print("Recall : ",recall_cm)
print("F1-Score : ",f1_score)
* from matplotlib.colors import ListedColormap
X_set, y_set = X_train, y_train
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
 np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
 alpha = 0.6, cmap = ListedColormap(('red', 'green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
 plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
 c = ListedColormap(('red', 'green'))(i), label = j)
plt.title('Logistic Regression (Training set)')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.legend()
plt.show()